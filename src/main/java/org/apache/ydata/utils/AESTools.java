package org.apache.ydata.utils;

import org.apache.commons.codec.binary.Base64;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class AESTools {
    // 加密
    public static String encrypt(String sSrc, String sKey) throws Exception {
        if (sKey == null) {
            System.out.print("Key为空null");
            return null;
        }
        // 判断Key是否为16位
        if (sKey.length() != 16 && sKey.length() != 32) {
            System.out.print("Key长度不是16位");
            return null;
        }
        byte[] raw = sKey.getBytes("utf-8");
        SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");//"算法/模式/补码方式"
        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
        byte[] encrypted = cipher.doFinal(sSrc.getBytes("utf-8"));

        return new Base64().encodeToString(encrypted);//此处使用BASE64做转码功能，同时能起到2次加密的作用。
    }

    // 解密
    public static String decrypt(String sSrc, String sKey) throws Exception {
        try {
            // 判断Key是否正确
            if (sKey == null) {
                System.out.print("Key为空null");
                return null;
            }
            // 判断Key是否为16位
            if (sKey.length() != 16 && sKey.length() != 32) {
                System.out.print("Key长度错误");
                return null;
            }
//            if(sKey.length() == 32) {
//                sKey = sKey.substring()
//            }
            byte[] raw = sKey.getBytes("utf-8");
            SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            cipher.init(Cipher.DECRYPT_MODE, skeySpec);

            byte[] encrypted1 = new Base64().decode(sSrc);//先用base64解密
            try {
                byte[] original = cipher.doFinal(encrypted1);
                String originalString = new String(original,"utf-8");
                return originalString;
            } catch (Exception e) {
                System.out.println(e.toString());
                return null;
            }
        } catch (Exception ex) {
            System.out.println(ex.toString());
            return null;
        }
    }

    public static void main(String[] args) throws Exception {
        AESTools se = new AESTools();
        /*
         * 加密
         */
//        System.out.println("使用AES对称加密，请输入加密的规则");
//        String key = "nx9XRONRIF4HPFFM";
//        String key = "052ca0759e31d3d36dc073dd1932a744";
//        String content = "ABCViewController";
//        System.out.println("要加密的内容：" + content);
//        String encodeContent = encrypt(content, key);
//        String encodeContent = "VtWL7jFoMU47uiC0wsnDBr7bHjtf0TZ6ooU8XKxhuEzLMoeVtDok7wJPtKvtjFDQ52iG6k6Mo3PkZKBZKtPny1ZeCy+tD6dgQzrZrX5YXgwX0SgJ/es23eZCHx7C87sYOSrW9vaplaBnqJzM53lo9LrvoEeOBSrfGERfWineEhMv4IxMp436yB1upk7b8KEz";
//        System.out.println("密钥："+key+", 加密后的密文是："+encodeContent);

        /*
         * 解密
         */
        System.out.println("使用AES对称解密，请输入加密的规则：(须与加密相同)");
//        encodeRules=scanner.next();
//        System.out.println("请输入要解密的内容（密文）:");
//        content = encodeContent;
//        String encodeContent = "UAkZ/RWblX4kM8CsfdG42g==";  //30.549955
//        String encodeContent = "L7hRlM3lrw7ztjDU8hV7iQ==";  //104.070737
        String key = "96fd2da9c64779e45269ff9a474745db";
        String encodeContent = "";
        System.out.println("密钥："+key+", 解密后的明文是："+decrypt(Base64Util.decode(encodeContent), key));
    }
}
